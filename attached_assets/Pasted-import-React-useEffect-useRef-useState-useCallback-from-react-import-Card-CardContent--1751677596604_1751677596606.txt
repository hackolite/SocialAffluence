import React, { useEffect, useRef, useState, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { 
  Camera, 
  Activity, 
  Play, 
  Pause, 
  Eye, 
  Users, 
  Car 
} from 'lucide-react';

// Types
interface DetectionCounts {
  total: number;
  people: number;
  vehicles: number;
}

interface DetectionBox {
  x: number;
  y: number;
  width: number;
  height: number;
  confidence: number;
  class: 'person' | 'vehicle';
}

interface CameraMonitoringProps {
  className?: string;
}

const CameraMonitoring: React.FC<CameraMonitoringProps> = ({ className }) => {
  // Refs avec types spécifiques
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const streamRef = useRef<MediaStream | null>(null);
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  // États avec types
  const [isActive, setIsActive] = useState<boolean>(false);
  const [cameraError, setCameraError] = useState<string | null>(null);
  const [fps] = useState<number>(1);
  const [currentDetections, setCurrentDetections] = useState<DetectionCounts>({
    total: 0,
    people: 0,
    vehicles: 0
  });
  const [detectionBoxes, setDetectionBoxes] = useState<DetectionBox[]>([]);

  // Fonction pour démarrer la caméra
  const startCamera = useCallback(async (): Promise<void> => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: {
          width: { ideal: 1280 },
          height: { ideal: 720 },
          facingMode: 'environment'
        }
      });
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        streamRef.current = stream;
        setCameraError(null);
      }
    } catch (err) {
      console.error('Erreur accès caméra:', err);
      const error = err as Error;
      setCameraError(
        error.name === 'NotAllowedError' 
          ? 'Accès à la caméra refusé. Veuillez autoriser l\'accès.'
          : 'Impossible d\'accéder à la caméra.'
      );
    }
  }, []);

  // Fonction pour arrêter la caméra
  const stopCamera = useCallback((): void => {
    if (streamRef.current) {
      streamRef.current.getTracks().forEach((track: MediaStreamTrack) => {
        track.stop();
      });
      streamRef.current = null;
    }
    
    if (videoRef.current) {
      videoRef.current.srcObject = null;
    }
    
    setCameraError(null);
  }, []);

  // Simulation de détection d'objets
  const simulateDetection = useCallback((): void => {
    if (!videoRef.current) return;

    const video = videoRef.current;
    const videoWidth = video.videoWidth;
    const videoHeight = video.videoHeight;
    
    if (videoWidth === 0 || videoHeight === 0) return;

    // Générer des détections aléatoires
    const numDetections = Math.floor(Math.random() * 5) + 1;
    const boxes: DetectionBox[] = [];
    let peopleCount = 0;
    let vehicleCount = 0;

    for (let i = 0; i < numDetections; i++) {
      const isPersonDetection = Math.random() > 0.3;
      const detectionClass: 'person' | 'vehicle' = isPersonDetection ? 'person' : 'vehicle';
      
      if (isPersonDetection) {
        peopleCount++;
      } else {
        vehicleCount++;
      }

      boxes.push({
        x: Math.random() * (videoWidth - 100),
        y: Math.random() * (videoHeight - 100),
        width: 50 + Math.random() * 100,
        height: 60 + Math.random() * 120,
        confidence: 0.6 + Math.random() * 0.4,
        class: detectionClass
      });
    }

    setDetectionBoxes(boxes);
    setCurrentDetections({
      total: numDetections,
      people: peopleCount,
      vehicles: vehicleCount
    });
  }, []);

  // Dessiner les détections sur le canvas
  const drawDetections = useCallback((): void => {
    const canvas = canvasRef.current;
    const video = videoRef.current;
    
    if (!canvas || !video) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Ajuster la taille du canvas à la vidéo
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;

    // Effacer le canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Dessiner les boîtes de détection
    detectionBoxes.forEach((box: DetectionBox) => {
      ctx.strokeStyle = box.class === 'person' ? '#00ff00' : '#ff6600';
      ctx.lineWidth = 2;
      ctx.strokeRect(box.x, box.y, box.width, box.height);

      // Dessiner le label
      ctx.fillStyle = box.class === 'person' ? '#00ff00' : '#ff6600';
      ctx.font = '12px Arial';
      const label = `${box.class} ${Math.round(box.confidence * 100)}%`;
      ctx.fillText(label, box.x, box.y - 5);
    });
  }, [detectionBoxes]);

  // Gérer play/pause
  const handlePlayPause = async (): Promise<void> => {
    if (!isActive) {
      await startCamera();
      setIsActive(true);
      
      // Démarrer le traitement à 1 FPS
      intervalRef.current = setInterval(() => {
        simulateDetection();
        drawDetections();
      }, 1000); // 1 FPS = 1000ms
      
    } else {
      setIsActive(false);
      stopCamera();
      
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    }
  };

  // Cleanup
  useEffect(() => {
    return () => {
      stopCamera();
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [stopCamera]);

  // Redessiner les détections quand les boîtes changent
  useEffect(() => {
    if (isActive) {
      drawDetections();
    }
  }, [detectionBoxes, isActive, drawDetections]);

  return (
    <div className={`grid lg:grid-cols-2 gap-6 ${className || ''}`}>
      {/* Flux Caméra */}
      <Card className="glass">
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center">
              <Camera className="mr-2 h-5 w-5" />
              Surveillance Temps Réel
            </CardTitle>
            <div className="flex items-center gap-2">
              <Badge variant={isActive ? "default" : "secondary"}>
                <Activity className="mr-1 h-3 w-3" />
                {isActive ? `${fps} FPS` : "ARRÊTÉ"}
              </Badge>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="aspect-video bg-muted/20 rounded-lg border border-border overflow-hidden relative mb-4">
            <video
              ref={videoRef}
              className="w-full h-full object-cover"
              autoPlay
              muted
              playsInline
              style={{ display: cameraError ? 'none' : 'block' }}
            />
            <canvas
              ref={canvasRef}
              className="absolute top-0 left-0 w-full h-full pointer-events-none"
            />
            
            {/* Overlay d'informations */}
            <div className="absolute top-4 left-4 bg-black/70 text-white px-3 py-2 rounded backdrop-blur-sm">
              <div className="text-xs space-y-1">
                <div>Détections: {currentDetections.total}</div>
                <div>Personnes: {currentDetections.people}</div>
                <div>Véhicules: {currentDetections.vehicles}</div>
              </div>
            </div>

            {cameraError && (
              <div className="absolute inset-0 flex items-center justify-center bg-black/50 text-white">
                <div className="text-center">
                  <Eye className="h-12 w-12 mx-auto mb-2 opacity-50" />
                  <p className="text-sm">{cameraError}</p>
                </div>
              </div>
            )}
          </div>
          
          <Button
            onClick={handlePlayPause}
            className={isActive ? "bg-destructive hover:bg-destructive/90" : "gradient-primary"}
          >
            {isActive ? <Pause className="mr-2 h-4 w-4" /> : <Play className="mr-2 h-4 w-4" />}
            {isActive ? "Arrêter" : "Démarrer"}
          </Button>
        </CardContent>
      </Card>

      {/* Métriques en temps réel */}
      <div className="space-y-4">
        <Card className="glass">
          <CardHeader>
            <CardTitle className="text-lg">Métriques Instantanées</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-3 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-primary">{currentDetections.total}</div>
                <div className="text-sm text-muted-foreground flex items-center justify-center">
                  <Activity className="w-3 h-3 mr-1" />
                  Total
                </div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-accent">{currentDetections.people}</div>
                <div className="text-sm text-muted-foreground flex items-center justify-center">
                  <Users className="w-3 h-3 mr-1" />
                  Personnes
                </div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-orange-500">{currentDetections.vehicles}</div>
                <div className="text-sm text-muted-foreground flex items-center justify-center">
                  <Car className="w-3 h-3 mr-1" />
                  Véhicules
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="glass">
          <CardHeader>
            <CardTitle className="text-lg">Statut Système</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-sm">Fréquence d'analyse</span>
                <Badge variant="outline">1 FPS</Badge>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm">Mode de détection</span>
                <Badge variant="outline">Simulation IA</Badge>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm">Statut caméra</span>
                <Badge variant={isActive ? "default" : "secondary"}>
                  {isActive ? "Active" : "Inactive"}
                </Badge>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default CameraMonitoring;